"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Telegram-–±–æ—Ç–∞ "–û—Ç–º–∞–∑–æ—á–Ω–∏–∫"
"""
import asyncio
import logging
import os
from datetime import datetime
from app.config import config
from app.bot import start_bot

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª—ã"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("logs", exist_ok=True)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_logger = logging.getLogger("app")
    app_logger.setLevel(logging.INFO)
    
    # –õ–æ–≥–≥–µ—Ä –æ—à–∏–±–æ–∫
    error_logger = logging.getLogger("error")
    error_logger.setLevel(logging.ERROR)
    
    # –õ–æ–≥–≥–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    request_logger = logging.getLogger("requests")
    request_logger.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è app.log
    app_handler = logging.FileHandler("logs/app.log", encoding='utf-8')
    app_handler.setFormatter(formatter)
    app_logger.addHandler(app_handler)
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è errors.log
    error_handler = logging.FileHandler("logs/errors.log", encoding='utf-8')
    error_handler.setFormatter(formatter)
    error_logger.addHandler(error_handler)
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è requests.log
    request_handler = logging.FileHandler("logs/requests.log", encoding='utf-8')
    request_handler.setFormatter(formatter)
    request_logger.addHandler(request_handler)
    
    # –ë–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logging.getLogger().addHandler(console_handler)
    logging.getLogger().setLevel(config.LOG_LEVEL)

def validate_startup():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    app_logger = logging.getLogger("app")
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config.validate()
        app_logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM API
        from app.llm_client import get_client
        client = get_client()
        app_logger.info(f"‚úÖ LLM –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {config.LLM_BASE_URL}")
        app_logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å: {config.MODEL_NAME}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ logs
        if os.path.exists("logs"):
            app_logger.info("‚úÖ –ü–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            app_logger.warning("‚ö†Ô∏è  –ü–∞–ø–∫–∞ logs –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
            
        return True
        
    except Exception as e:
        error_logger = logging.getLogger("error")
        error_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", exc_info=True)
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    app_logger = logging.getLogger("app")
    
    try:
        app_logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ '–û—Ç–º–∞–∑–æ—á–Ω–∏–∫'")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not validate_startup():
            app_logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            return
            
        app_logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        asyncio.run(start_bot())
        
    except KeyboardInterrupt:
        app_logger.info("‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        error_logger = logging.getLogger("error") 
        error_logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
    finally:
        app_logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

if __name__ == "__main__":
    main()

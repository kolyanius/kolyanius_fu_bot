"""
–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Telegram-–±–æ—Ç–∞ "–û—Ç–º–∞–∑–æ—á–Ω–∏–∫"
"""
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.config import config
from app.llm_client import generate_text
from app.prompts import BASIC_PROMPT, EXCUSE_PROMPTS
from app.styles import STYLES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=config.LOG_LEVEL)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def create_style_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{STYLES['–±—ã–¥–ª–æ']['emoji']} {STYLES['–±—ã–¥–ª–æ']['name']}", 
                callback_data="style_–±—ã–¥–ª–æ"
            ),
            InlineKeyboardButton(
                text=f"{STYLES['–∫–æ—Ä–ø–æ—Ä–∞—Ç']['emoji']} {STYLES['–∫–æ—Ä–ø–æ—Ä–∞—Ç']['name']}", 
                callback_data="style_–∫–æ—Ä–ø–æ—Ä–∞—Ç"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{STYLES['–º–æ–Ω–∞—Ö']['emoji']} {STYLES['–º–æ–Ω–∞—Ö']['name']}", 
                callback_data="style_–º–æ–Ω–∞—Ö"
            ),
            InlineKeyboardButton(
                text=f"{STYLES['–∏–Ω—Ñ–æ—Ü—ã–≥–∞–Ω']['emoji']} {STYLES['–∏–Ω—Ñ–æ—Ü—ã–≥–∞–Ω']['name']}", 
                callback_data="style_–∏–Ω—Ñ–æ—Ü—ã–≥–∞–Ω"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{STYLES['—Å–ª—É—á–∞–π–Ω—ã–π']['emoji']} {STYLES['—Å–ª—É—á–∞–π–Ω—ã–π']['name']}", 
                callback_data="style_—Å–ª—É—á–∞–π–Ω—ã–π"
            )
        ]
    ])
    return keyboard

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ—Ç–º–∞–∑–æ—á–Ω–∏–∫! üé≠\n\n"
        "–û–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è —Å–æ–∑–¥–∞–º –æ—Ç–º–∞–∑–∫—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ.\n\n"
        f"–ú–∞–∫—Å–∏–º—É–º {config.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å!"
    )

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = "üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ—Ç–º–∞–∑–æ–∫:\n\n"
    
    for style_key, style_info in STYLES.items():
        if style_key != "—Å–ª—É—á–∞–π–Ω—ã–π":
            help_text += f"{style_info['emoji']} **{style_info['name']}** - {style_info['description']}\n\n"
    
    help_text += f"{STYLES['—Å–ª—É—á–∞–π–Ω—ã–π']['emoji']} **{STYLES['—Å–ª—É—á–∞–π–Ω—ã–π']['name']}** - {STYLES['—Å–ª—É—á–∞–π–Ω—ã–π']['description']}\n\n"
    help_text += "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø–æ–∫–∞–∂—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è!"
    
    await message.answer(help_text)

@dp.message()
async def message_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(message.text) > config.MAX_MESSAGE_LENGTH:
        await message.answer(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {config.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
            f"–£ —Ç–µ–±—è {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[message.from_user.id] = {
        "original_message": message.text,
        "message_id": message.message_id
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    keyboard = create_style_keyboard()
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –æ—Ç–º–∞–∑–∫–∏:",
        reply_markup=keyboard
    )

@dp.callback_query()
async def style_callback_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∏–ª–µ–π"""
    if not callback.data.startswith("style_"):
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    selected_style = callback.data.replace("style_", "")
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id not in user_states:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π!")
        return
    
    original_message = user_states[user_id]["original_message"]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å
    if selected_style == "—Å–ª—É—á–∞–π–Ω—ã–π":
        available_styles = [s for s in STYLES.keys() if s != "—Å–ª—É—á–∞–π–Ω—ã–π"]
        selected_style = random.choice(available_styles)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await callback.bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    prompt = EXCUSE_PROMPTS[selected_style].format(user_message=original_message)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–º–∞–∑–∫—É —á–µ—Ä–µ–∑ LLM
    response = await generate_text(prompt)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–º–∞–∑–∫—É —Å —ç–º–æ–¥–∑–∏ —Å—Ç–∏–ª—è
    style_emoji = STYLES[selected_style]["emoji"]
    style_name = STYLES[selected_style]["name"]
    
    await callback.message.edit_text(
        f"**–°—Ç–∏–ª—å: {style_emoji} {style_name}**\n\n{response}"
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    await callback.answer(f"–û—Ç–º–∞–∑–∫–∞ –≤ —Å—Ç–∏–ª–µ '{style_name}' –≥–æ—Ç–æ–≤–∞!")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)
